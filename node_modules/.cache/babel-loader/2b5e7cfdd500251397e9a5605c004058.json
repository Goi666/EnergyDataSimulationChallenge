{"ast":null,"code":"var _jsxFileName = \"/front/src/Home/App.jsx\";\nimport React, { Component } from 'react';\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts'; // import axiosbase from 'axios';\n\nimport moment from 'moment'; // const axios = axiosbase.create({\n//   baseURL: 'http://localhost:3000',\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n//   responseType: 'json',\n// })\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      // year: [],\n      // month: [],\n      // energy_production: [],\n      lists: []\n    };\n  } // componentDidMount() {\n  //   axios\n  //   .get('/')\n  //   .then((res) => {\n  //     console.log(res.data);\n  //     this.setState({ lists: res.data });\n  //     // console.dir(res.data.data.energy_production[0]);\n  //   })\n  //   .catch((err) => {\n  //     console.log(err) // 失敗\n  //   });\n  // }\n\n\n  render() {\n    //// - Memo -\n    //// 1. レスポンスは返ってきている\n    //// 2. 一応画面描画もできている\n    //// 3. API設計し直した方が早いかも...\n    //// this.state.dataを取得してエレメント作らないといけない\n    //// 難しいので取得レスポンスの形を考え直した方が早いかも\n    //// res.data.dataでレスポンス内容を取得可能\n    //// - 2020/07/12 -\n    // const data = [\n    //   {\n    //     Oxford: this.state.data.data.energy_production\n    //   },\n    //   {\n    //     Oxford: this.state.data.data.energy_production\n    //   },\n    //   {\n    //     Oxford: this.state.data.data.energy_production\n    //   }\n    // ];\n    // const data = [\n    //   {\n    //     name: 'Page A', uv: 4000, pv: 2400, amt: 2400,\n    //   },\n    //   {\n    //     name: 'Page B', uv: 3000, pv: 1398, amt: 2210,\n    //   },\n    //   {\n    //     name: 'Page C', uv: 2000, pv: 9800, amt: 2290,\n    //   },\n    //   {\n    //     name: 'Page D', uv: 2780, pv: 3908, amt: 2000,\n    //   },\n    //   {\n    //     name: 'Page E', uv: 1890, pv: 4800, amt: 2181,\n    //   },\n    //   {\n    //     name: 'Page F', uv: 2390, pv: 3800, amt: 2500,\n    //   },\n    //   {\n    //     name: 'Page G', uv: 3490, pv: 4300, amt: 2100,\n    //   },\n    // ];\n    // {this.state.res.data.map((data) => {\n    //   data.push({date: moment('2020-07-01').unix() * 1000, Oxford: lists.oxford})\n    // })}\n    // const data = [\n    //   { date: moment('2018-12-01').unix() * 1000, 最高気温: 10, 最低気温: 1 },\n    //   { date: moment('2018-12-02').unix() * 1000, 最高気温: 12, 最低気温: 4 },\n    //   { date: moment('2018-12-03').unix() * 1000, 最高気温: 18, 最低気温: 8 },\n    //   { date: moment('2018-12-04').unix() * 1000, 最高気温: 10, 最低気温: 0 },\n    //   { date: moment('2018-12-05').unix() * 1000, 最高気温: 9, 最低気温: 1 },\n    //   { date: moment('2018-12-06').unix() * 1000, 最高気温: 13, 最低気温: 2 },\n    //   { date: moment('2018-12-07').unix() * 1000, 最高気温: 16, 最低気温: 5 },\n    // ];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/front/src/Home/App.jsx"],"names":["React","Component","ResponsiveContainer","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","moment","Home","constructor","props","state","data","lists","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SACEC,mBADF,EACuBC,SADvB,EACkCC,IADlC,EACwCC,KADxC,EAC+CC,KAD/C,EACsDC,aADtD,EACqEC,OADrE,EAC8EC,MAD9E,QAEO,UAFP,C,CAGA;;AACA,OAAOC,MAAP,MAAmB,QAAnB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAMC,IAAN,SAAmBV,SAAnB,CAA6B;AAC3BW,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,EADK;AAEX;AACA;AACA;AACAC,MAAAA,KAAK,EAAE;AALI,KAAb;AAOD,GAV0B,CAY3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,EAAAA,MAAM,GAAI;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAuBD;;AA5G0B;;AA+G7B,eAAeN,IAAf","sourcesContent":["import React, { Component } from 'react';\n\nimport {\n  ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\n// import axiosbase from 'axios';\nimport moment from 'moment';\n\n// const axios = axiosbase.create({\n//   baseURL: 'http://localhost:3000',\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n//   responseType: 'json',\n// })\n\n\nclass Home extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      data: [],\n      // year: [],\n      // month: [],\n      // energy_production: [],\n      lists: [],\n    };\n  }\n  \n  // componentDidMount() {\n  //   axios\n  //   .get('/')\n  //   .then((res) => {\n  //     console.log(res.data);\n  //     this.setState({ lists: res.data });\n  //     // console.dir(res.data.data.energy_production[0]);\n  //   })\n  //   .catch((err) => {\n  //     console.log(err) // 失敗\n  //   });\n  // }\n\n  render () {\n    //// - Memo -\n    //// 1. レスポンスは返ってきている\n    //// 2. 一応画面描画もできている\n    //// 3. API設計し直した方が早いかも...\n    //// this.state.dataを取得してエレメント作らないといけない\n    //// 難しいので取得レスポンスの形を考え直した方が早いかも\n    //// res.data.dataでレスポンス内容を取得可能\n    //// - 2020/07/12 -\n\n    // const data = [\n    //   {\n    //     Oxford: this.state.data.data.energy_production\n    //   },\n    //   {\n    //     Oxford: this.state.data.data.energy_production\n    //   },\n    //   {\n    //     Oxford: this.state.data.data.energy_production\n    //   }\n    // ];\n\n    // const data = [\n    //   {\n    //     name: 'Page A', uv: 4000, pv: 2400, amt: 2400,\n    //   },\n    //   {\n    //     name: 'Page B', uv: 3000, pv: 1398, amt: 2210,\n    //   },\n    //   {\n    //     name: 'Page C', uv: 2000, pv: 9800, amt: 2290,\n    //   },\n    //   {\n    //     name: 'Page D', uv: 2780, pv: 3908, amt: 2000,\n    //   },\n    //   {\n    //     name: 'Page E', uv: 1890, pv: 4800, amt: 2181,\n    //   },\n    //   {\n    //     name: 'Page F', uv: 2390, pv: 3800, amt: 2500,\n    //   },\n    //   {\n    //     name: 'Page G', uv: 3490, pv: 4300, amt: 2100,\n    //   },\n    // ];\n\n    // {this.state.res.data.map((data) => {\n    //   data.push({date: moment('2020-07-01').unix() * 1000, Oxford: lists.oxford})\n    // })}\n\n    // const data = [\n    //   { date: moment('2018-12-01').unix() * 1000, 最高気温: 10, 最低気温: 1 },\n    //   { date: moment('2018-12-02').unix() * 1000, 最高気温: 12, 最低気温: 4 },\n    //   { date: moment('2018-12-03').unix() * 1000, 最高気温: 18, 最低気温: 8 },\n    //   { date: moment('2018-12-04').unix() * 1000, 最高気温: 10, 最低気温: 0 },\n    //   { date: moment('2018-12-05').unix() * 1000, 最高気温: 9, 最低気温: 1 },\n    //   { date: moment('2018-12-06').unix() * 1000, 最高気温: 13, 最低気温: 2 },\n    //   { date: moment('2018-12-07').unix() * 1000, 最高気温: 16, 最低気温: 5 },\n    // ];\n\n    return (\n      <div>\n      {/* <LineChart\n        width={500}\n        height={300}\n        data={data}\n        margin={{\n          top: 5, right: 30, left: 20, bottom: 5,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n        <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" />\n        <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n        <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#82ca9d\" />\n        <Line type=\"monotone\" dataKey=\"London\" stroke=\"#82ca9d\" />\n      </LineChart> */}\n      </div>\n    );\n  }\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}