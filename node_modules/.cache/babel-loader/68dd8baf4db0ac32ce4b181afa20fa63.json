{"ast":null,"code":"var _jsxFileName = \"/front/src/Home/App.jsx\";\nimport React, { Component } from 'react';\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport axiosbase from 'axios';\nimport moment from 'moment';\nconst axios = axiosbase.create({\n  baseURL: 'http://localhost:3000',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  responseType: 'json'\n});\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      // year: [],\n      // month: [],\n      // energy_production: [],\n      lists: []\n    };\n  }\n\n  componentDidMount() {\n    axios.get('/').then(res => {\n      console.log(res.data);\n      this.setState({\n        lists: res.data\n      }); // console.dir(res.data.data.energy_production[0]);\n    }).catch(err => {\n      console.log(err); // 失敗\n    });\n  }\n\n  render() {\n    //// - Memo -\n    //// 1. レスポンスは返ってきている\n    //// 2. 一応画面描画もできている\n    //// 3. API設計し直した方が早いかも...\n    //// this.state.dataを取得してエレメント作らないといけない\n    //// 難しいので取得レスポンスの形を考え直した方が早いかも\n    //// res.data.dataでレスポンス内容を取得可能\n    //// - 2020/07/12 -\n    // const data = [\n    //   {\n    //     Oxford: this.state.data.data.energy_production\n    //   },\n    //   {\n    //     Oxford: this.state.data.data.energy_production\n    //   },\n    //   {\n    //     Oxford: this.state.data.data.energy_production\n    //   }\n    // ];\n    const data = [{\n      name: '2020-07',\n      uv: 4000,\n      pv: 2400,\n      amt: 2400\n    }, {\n      name: '2020-08',\n      uv: 3000,\n      pv: 1398,\n      amt: 2210\n    }, {\n      name: '2020-09',\n      uv: 2000,\n      pv: 9800,\n      amt: 2290\n    }, {\n      name: '2020-10',\n      uv: 2780,\n      pv: 3908,\n      amt: 2000\n    }, {\n      name: '2020-11',\n      uv: 1890,\n      pv: 4800,\n      amt: 2181\n    }, {\n      name: '2020-12',\n      uv: 2390,\n      pv: 3800,\n      amt: 2500\n    } // {\n    //   name: 'Page G', uv: 3490, pv: 4300, amt: 2100,\n    // },\n    ]; // {this.state.res.data.map((data) => {\n    //   data.push({date: moment('2020-07-01').unix() * 1000, Oxford: lists.oxford})\n    // })}\n    // const data = [\n    //   { date: moment('2018-12-01').unix() * 1000, 最高気温: 10, 最低気温: 1 },\n    //   { date: moment('2018-12-02').unix() * 1000, 最高気温: 12, 最低気温: 4 },\n    //   { date: moment('2018-12-03').unix() * 1000, 最高気温: 18, 最低気温: 8 },\n    //   { date: moment('2018-12-04').unix() * 1000, 最高気温: 10, 最低気温: 0 },\n    //   { date: moment('2018-12-05').unix() * 1000, 最高気温: 9, 最低気温: 1 },\n    //   { date: moment('2018-12-06').unix() * 1000, 最高気温: 13, 最低気温: 2 },\n    //   { date: moment('2018-12-07').unix() * 1000, 最高気温: 16, 最低気温: 5 },\n    // ];\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(LineChart, {\n      width: 300,\n      height: 300,\n      data: data,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CartesianGrid, {\n      strokeDasharray: \"3 3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Legend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"pv\",\n      stroke: \"#8884d8\",\n      activeDot: {\n        r: 8\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"uv\",\n      stroke: \"#8884d8\",\n      activeDot: {\n        r: 8\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }\n    })));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/front/src/Home/App.jsx"],"names":["React","Component","ResponsiveContainer","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","axiosbase","moment","axios","create","baseURL","headers","responseType","Home","constructor","props","state","data","lists","componentDidMount","get","then","res","console","log","setState","catch","err","render","name","uv","pv","amt","top","right","left","bottom","r"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SACEC,mBADF,EACuBC,SADvB,EACkCC,IADlC,EACwCC,KADxC,EAC+CC,KAD/C,EACsDC,aADtD,EACqEC,OADrE,EAC8EC,MAD9E,QAEO,UAFP;AAGA,OAAOC,SAAP,MAAsB,OAAtB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,MAAMC,KAAK,GAAGF,SAAS,CAACG,MAAV,CAAiB;AAC7BC,EAAAA,OAAO,EAAE,uBADoB;AAE7BC,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT,GAFoB;AAK7BC,EAAAA,YAAY,EAAE;AALe,CAAjB,CAAd;;AASA,MAAMC,IAAN,SAAmBhB,SAAnB,CAA6B;AAC3BiB,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,EADK;AAEX;AACA;AACA;AACAC,MAAAA,KAAK,EAAE;AALI,KAAb;AAOD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClBX,IAAAA,KAAK,CACJY,GADD,CACK,GADL,EAECC,IAFD,CAEOC,GAAD,IAAS;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACL,IAAhB;AACA,WAAKQ,QAAL,CAAc;AAAEP,QAAAA,KAAK,EAAEI,GAAG,CAACL;AAAb,OAAd,EAFa,CAGb;AACD,KAND,EAOCS,KAPD,CAOQC,GAAD,IAAS;AACdJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ,EADc,CACG;AAClB,KATD;AAUD;;AAEDC,EAAAA,MAAM,GAAI;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,UAAMX,IAAI,GAAG,CACX;AACEY,MAAAA,IAAI,EAAE,SADR;AACmBC,MAAAA,EAAE,EAAE,IADvB;AAC6BC,MAAAA,EAAE,EAAE,IADjC;AACuCC,MAAAA,GAAG,EAAE;AAD5C,KADW,EAIX;AACEH,MAAAA,IAAI,EAAE,SADR;AACmBC,MAAAA,EAAE,EAAE,IADvB;AAC6BC,MAAAA,EAAE,EAAE,IADjC;AACuCC,MAAAA,GAAG,EAAE;AAD5C,KAJW,EAOX;AACEH,MAAAA,IAAI,EAAE,SADR;AACmBC,MAAAA,EAAE,EAAE,IADvB;AAC6BC,MAAAA,EAAE,EAAE,IADjC;AACuCC,MAAAA,GAAG,EAAE;AAD5C,KAPW,EAUX;AACEH,MAAAA,IAAI,EAAE,SADR;AACmBC,MAAAA,EAAE,EAAE,IADvB;AAC6BC,MAAAA,EAAE,EAAE,IADjC;AACuCC,MAAAA,GAAG,EAAE;AAD5C,KAVW,EAaX;AACEH,MAAAA,IAAI,EAAE,SADR;AACmBC,MAAAA,EAAE,EAAE,IADvB;AAC6BC,MAAAA,EAAE,EAAE,IADjC;AACuCC,MAAAA,GAAG,EAAE;AAD5C,KAbW,EAgBX;AACEH,MAAAA,IAAI,EAAE,SADR;AACmBC,MAAAA,EAAE,EAAE,IADvB;AAC6BC,MAAAA,EAAE,EAAE,IADjC;AACuCC,MAAAA,GAAG,EAAE;AAD5C,KAhBW,CAmBX;AACA;AACA;AArBW,KAAb,CAtBQ,CA8CR;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,SAAD;AACE,MAAA,KAAK,EAAE,GADT;AAEE,MAAA,MAAM,EAAE,GAFV;AAGE,MAAA,IAAI,EAAEf,IAHR;AAIE,MAAA,MAAM,EAAE;AACNgB,QAAAA,GAAG,EAAE,CADC;AACEC,QAAAA,KAAK,EAAE,EADT;AACaC,QAAAA,IAAI,EAAE,EADnB;AACuBC,QAAAA,MAAM,EAAE;AAD/B,OAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAQE,oBAAC,aAAD;AAAe,MAAA,eAAe,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,eASE,oBAAC,KAAD;AAAO,MAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,eAUE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,eAWE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,eAYE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,eAaE,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,UAAX;AAAsB,MAAA,OAAO,EAAC,IAA9B;AAAmC,MAAA,MAAM,EAAC,SAA1C;AAAoD,MAAA,SAAS,EAAE;AAAEC,QAAAA,CAAC,EAAE;AAAL,OAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,eAeE,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAC,UAAX;AAAsB,MAAA,OAAO,EAAC,IAA9B;AAAmC,MAAA,MAAM,EAAC,SAA1C;AAAoD,MAAA,SAAS,EAAE;AAAEA,QAAAA,CAAC,EAAE;AAAL,OAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfF,CADA,CADF;AAuBD;;AA5G0B;;AA+G7B,eAAexB,IAAf","sourcesContent":["import React, { Component } from 'react';\n\nimport {\n  ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\nimport axiosbase from 'axios';\nimport moment from 'moment';\n\nconst axios = axiosbase.create({\n  baseURL: 'http://localhost:3000',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  responseType: 'json',\n})\n\n\nclass Home extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      data: [],\n      // year: [],\n      // month: [],\n      // energy_production: [],\n      lists: [],\n    };\n  }\n  \n  componentDidMount() {\n    axios\n    .get('/')\n    .then((res) => {\n      console.log(res.data);\n      this.setState({ lists: res.data });\n      // console.dir(res.data.data.energy_production[0]);\n    })\n    .catch((err) => {\n      console.log(err) // 失敗\n    });\n  }\n\n  render () {\n    //// - Memo -\n    //// 1. レスポンスは返ってきている\n    //// 2. 一応画面描画もできている\n    //// 3. API設計し直した方が早いかも...\n    //// this.state.dataを取得してエレメント作らないといけない\n    //// 難しいので取得レスポンスの形を考え直した方が早いかも\n    //// res.data.dataでレスポンス内容を取得可能\n    //// - 2020/07/12 -\n\n    // const data = [\n    //   {\n    //     Oxford: this.state.data.data.energy_production\n    //   },\n    //   {\n    //     Oxford: this.state.data.data.energy_production\n    //   },\n    //   {\n    //     Oxford: this.state.data.data.energy_production\n    //   }\n    // ];\n\n    const data = [\n      {\n        name: '2020-07', uv: 4000, pv: 2400, amt: 2400,\n      },\n      {\n        name: '2020-08', uv: 3000, pv: 1398, amt: 2210,\n      },\n      {\n        name: '2020-09', uv: 2000, pv: 9800, amt: 2290,\n      },\n      {\n        name: '2020-10', uv: 2780, pv: 3908, amt: 2000,\n      },\n      {\n        name: '2020-11', uv: 1890, pv: 4800, amt: 2181,\n      },\n      {\n        name: '2020-12', uv: 2390, pv: 3800, amt: 2500,\n      },\n      // {\n      //   name: 'Page G', uv: 3490, pv: 4300, amt: 2100,\n      // },\n    ];\n\n    // {this.state.res.data.map((data) => {\n    //   data.push({date: moment('2020-07-01').unix() * 1000, Oxford: lists.oxford})\n    // })}\n\n    // const data = [\n    //   { date: moment('2018-12-01').unix() * 1000, 最高気温: 10, 最低気温: 1 },\n    //   { date: moment('2018-12-02').unix() * 1000, 最高気温: 12, 最低気温: 4 },\n    //   { date: moment('2018-12-03').unix() * 1000, 最高気温: 18, 最低気温: 8 },\n    //   { date: moment('2018-12-04').unix() * 1000, 最高気温: 10, 最低気温: 0 },\n    //   { date: moment('2018-12-05').unix() * 1000, 最高気温: 9, 最低気温: 1 },\n    //   { date: moment('2018-12-06').unix() * 1000, 最高気温: 13, 最低気温: 2 },\n    //   { date: moment('2018-12-07').unix() * 1000, 最高気温: 16, 最低気温: 5 },\n    // ];\n\n    return (\n      <div>\n      <LineChart\n        width={300}\n        height={300}\n        data={data}\n        margin={{\n          top: 5, right: 30, left: 20, bottom: 5,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n        {/* <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" /> */}\n        <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n        {/* <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#82ca9d\" />\n        <Line type=\"monotone\" dataKey=\"London\" stroke=\"#82ca9d\" /> */}\n      </LineChart>\n      </div>\n    );\n  }\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}