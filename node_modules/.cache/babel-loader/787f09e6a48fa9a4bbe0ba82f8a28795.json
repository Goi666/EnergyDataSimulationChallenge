{"ast":null,"code":"var _jsxFileName = \"/front/src/Home/App.jsx\";\nimport React, { Component } from 'react';\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport axiosbase from 'axios';\nimport moment from 'moment';\nconst axios = axiosbase.create({\n  baseURL: 'http://localhost:3000',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  responseType: 'json'\n});\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      // year: [],\n      // month: [],\n      // energy_production: [],\n      lists: []\n    };\n  }\n\n  componentDidMount() {\n    axios.get('/').then(res => {\n      console.log(res.data);\n      this.setState({\n        lists: res.data\n      }); // console.dir(res.data.data.energy_production[0]);\n    }).catch(err => {\n      console.log(err); // 失敗\n    });\n  }\n\n  render() {\n    //// - Memo -\n    //// 1. レスポンスは返ってきている\n    //// 2. 一応画面描画もできている\n    //// 3. API設計し直した方が早いかも...\n    //// this.state.dataを取得してエレメント作らないといけない\n    //// 難しいので取得レスポンスの形を考え直した方が早いかも\n    //// res.data.dataでレスポンス内容を取得可能\n    //// - 2020/07/12 -\n    // const data = [\n    //   {\n    //     Oxford: this.state.data.data.energy_production\n    //   },\n    //   {\n    //     Oxford: this.state.data.data.energy_production\n    //   },\n    //   {\n    //     Oxford: this.state.data.data.energy_production\n    //   }\n    // ];\n    // const data = [\n    //   {\n    //     date: '2020-07', London: 4000, Oxford: 2400, Cambridge: 3300,\n    //   },\n    //   {\n    //     date: '2020-08', London: 3000, Oxford: 1398, Cambridge: 4000,\n    //   },\n    //   {\n    //     date: '2020-09', London: 2000, Oxford: 9800, Cambridge: 5000,\n    //   },\n    //   {\n    //     date: '2020-10', London: 2780, Oxford: 3908, Cambridge: 7000,\n    //   },\n    //   {\n    //     date: '2020-11', London: 1890, Oxford: 4800, Cambridge: 1000,\n    //   },\n    //   {\n    //     date: '2020-12', London: 2390, Oxford: 3800, Cambridge: 3300,\n    //   },\n    //   {\n    //     date: '2021-01', London: 3490, Oxford: 4300, Cambridge: 5000,\n    //   },\n    // ];\n    {\n      this.state.lists.map(data => {\n        this.state.data.push({\n          date: moment(data.date).unix() * 1000,\n          Cambridge: data.cambridge,\n          London: data.london,\n          Oxford: data.oxford\n        });\n      });\n    } // const data = [\n    //   { date: moment('2018-12-01').unix() * 1000, 最高気温: 10, 最低気温: 1 },\n    //   { date: moment('2018-12-02').unix() * 1000, 最高気温: 12, 最低気温: 4 },\n    //   { date: moment('2018-12-03').unix() * 1000, 最高気温: 18, 最低気温: 8 },\n    //   { date: moment('2018-12-04').unix() * 1000, 最高気温: 10, 最低気温: 0 },\n    //   { date: moment('2018-12-05').unix() * 1000, 最高気温: 9, 最低気温: 1 },\n    //   { date: moment('2018-12-06').unix() * 1000, 最高気温: 13, 最低気温: 2 },\n    //   { date: moment('2018-12-07').unix() * 1000, 最高気温: 16, 最低気温: 5 },\n    // ];\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(LineChart, {\n      width: 500,\n      height: 300,\n      data: this.state.data,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CartesianGrid, {\n      strokeDasharray: \"3 3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Legend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"Oxford\",\n      stroke: \"#8884d8\",\n      activeDot: {\n        r: 8\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"London\",\n      stroke: \"#8884d8\",\n      activeDot: {\n        r: 8\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"Cambridge\",\n      stroke: \"#8884d8\",\n      activeDot: {\n        r: 8\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }\n    })));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/front/src/Home/App.jsx"],"names":["React","Component","ResponsiveContainer","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","axiosbase","moment","axios","create","baseURL","headers","responseType","Home","constructor","props","state","data","lists","componentDidMount","get","then","res","console","log","setState","catch","err","render","map","push","date","unix","Cambridge","cambridge","London","london","Oxford","oxford","top","right","left","bottom","r"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport {\n  ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\nimport axiosbase from 'axios';\nimport moment from 'moment';\n\nconst axios = axiosbase.create({\n  baseURL: 'http://localhost:3000',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  responseType: 'json',\n})\n\n\nclass Home extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      data: [],\n      // year: [],\n      // month: [],\n      // energy_production: [],\n      lists: [],\n    };\n  }\n  \n  componentDidMount() {\n    axios\n    .get('/')\n    .then((res) => {\n      console.log(res.data);\n      this.setState({ lists: res.data });\n      // console.dir(res.data.data.energy_production[0]);\n    })\n    .catch((err) => {\n      console.log(err) // 失敗\n    });\n  }\n\n  render () {\n    //// - Memo -\n    //// 1. レスポンスは返ってきている\n    //// 2. 一応画面描画もできている\n    //// 3. API設計し直した方が早いかも...\n    //// this.state.dataを取得してエレメント作らないといけない\n    //// 難しいので取得レスポンスの形を考え直した方が早いかも\n    //// res.data.dataでレスポンス内容を取得可能\n    //// - 2020/07/12 -\n\n    // const data = [\n    //   {\n    //     Oxford: this.state.data.data.energy_production\n    //   },\n    //   {\n    //     Oxford: this.state.data.data.energy_production\n    //   },\n    //   {\n    //     Oxford: this.state.data.data.energy_production\n    //   }\n    // ];\n\n    // const data = [\n    //   {\n    //     date: '2020-07', London: 4000, Oxford: 2400, Cambridge: 3300,\n    //   },\n    //   {\n    //     date: '2020-08', London: 3000, Oxford: 1398, Cambridge: 4000,\n    //   },\n    //   {\n    //     date: '2020-09', London: 2000, Oxford: 9800, Cambridge: 5000,\n    //   },\n    //   {\n    //     date: '2020-10', London: 2780, Oxford: 3908, Cambridge: 7000,\n    //   },\n    //   {\n    //     date: '2020-11', London: 1890, Oxford: 4800, Cambridge: 1000,\n    //   },\n    //   {\n    //     date: '2020-12', London: 2390, Oxford: 3800, Cambridge: 3300,\n    //   },\n    //   {\n    //     date: '2021-01', London: 3490, Oxford: 4300, Cambridge: 5000,\n    //   },\n    // ];\n\n    {this.state.lists.map((data) => {\n      this.state.data.push({date: moment(data.date).unix() * 1000, Cambridge: data.cambridge, London: data.london, Oxford: data.oxford})\n    })}\n\n    // const data = [\n    //   { date: moment('2018-12-01').unix() * 1000, 最高気温: 10, 最低気温: 1 },\n    //   { date: moment('2018-12-02').unix() * 1000, 最高気温: 12, 最低気温: 4 },\n    //   { date: moment('2018-12-03').unix() * 1000, 最高気温: 18, 最低気温: 8 },\n    //   { date: moment('2018-12-04').unix() * 1000, 最高気温: 10, 最低気温: 0 },\n    //   { date: moment('2018-12-05').unix() * 1000, 最高気温: 9, 最低気温: 1 },\n    //   { date: moment('2018-12-06').unix() * 1000, 最高気温: 13, 最低気温: 2 },\n    //   { date: moment('2018-12-07').unix() * 1000, 最高気温: 16, 最低気温: 5 },\n    // ];\n\n    return (\n      <div>\n      <LineChart\n        width={500}\n        height={300}\n        data={this.state.data}\n        margin={{\n          top: 5, right: 30, left: 20, bottom: 5,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Line type=\"monotone\" dataKey=\"Oxford\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n        {/* <Line type=\"monotone\" dataKey=\"London\" stroke=\"#82ca9d\" /> */}\n        <Line type=\"monotone\" dataKey=\"London\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n        <Line type=\"monotone\" dataKey=\"Cambridge\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n        {/* <Line type=\"monotone\" dataKey=\"Oxford\" stroke=\"#82ca9d\" />\n        <Line type=\"monotone\" dataKey=\"London\" stroke=\"#82ca9d\" /> */}\n      </LineChart>\n      </div>\n    );\n  }\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}