{"ast":null,"code":"var _jsxFileName = \"/front/src/Home/App.jsx\";\nimport React, { Component } from 'react';\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts'; // import axiosbase from 'axios';\n\nimport moment from 'moment'; // const axios = axiosbase.create({\n//   baseURL: 'http://localhost:3000',\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n//   responseType: 'json',\n// })\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      // year: [],\n      // month: [],\n      // energy_production: [],\n      lists: []\n    };\n  }\n\n  componentDidMount() {\n    axios.get('/').then(res => {\n      console.log(res.data);\n      this.setState({\n        lists: res.data\n      }); // console.dir(res.data.data.energy_production[0]);\n    }).catch(err => {\n      console.log(err); // 失敗\n    });\n  }\n\n  render() {\n    //// - Memo -\n    //// 1. レスポンスは返ってきている\n    //// 2. 一応画面描画もできている\n    //// 3. API設計し直した方が早いかも...\n    //// this.state.dataを取得してエレメント作らないといけない\n    //// 難しいので取得レスポンスの形を考え直した方が早いかも\n    //// res.data.dataでレスポンス内容を取得可能\n    //// - 2020/07/12 -\n    // const data = [\n    //   {\n    //     Oxford: this.state.data.data.energy_production\n    //   },\n    //   {\n    //     Oxford: this.state.data.data.energy_production\n    //   },\n    //   {\n    //     Oxford: this.state.data.data.energy_production\n    //   }\n    // ];\n    // const data = [\n    //   {\n    //     name: 'Page A', uv: 4000, pv: 2400, amt: 2400,\n    //   },\n    //   {\n    //     name: 'Page B', uv: 3000, pv: 1398, amt: 2210,\n    //   },\n    //   {\n    //     name: 'Page C', uv: 2000, pv: 9800, amt: 2290,\n    //   },\n    //   {\n    //     name: 'Page D', uv: 2780, pv: 3908, amt: 2000,\n    //   },\n    //   {\n    //     name: 'Page E', uv: 1890, pv: 4800, amt: 2181,\n    //   },\n    //   {\n    //     name: 'Page F', uv: 2390, pv: 3800, amt: 2500,\n    //   },\n    //   {\n    //     name: 'Page G', uv: 3490, pv: 4300, amt: 2100,\n    //   },\n    // ];\n    // {this.state.res.data.map((data) => {\n    //   data.push({date: moment('2020-07-01').unix() * 1000, Oxford: lists.oxford})\n    // })}\n    const data = [{\n      date: moment('2018-12-01').unix() * 1000,\n      最高気温: 10,\n      最低気温: 1\n    }, {\n      date: moment('2018-12-02').unix() * 1000,\n      最高気温: 12,\n      最低気温: 4\n    }, {\n      date: moment('2018-12-03').unix() * 1000,\n      最高気温: 18,\n      最低気温: 8\n    }, {\n      date: moment('2018-12-04').unix() * 1000,\n      最高気温: 10,\n      最低気温: 0\n    }, {\n      date: moment('2018-12-05').unix() * 1000,\n      最高気温: 9,\n      最低気温: 1\n    }, {\n      date: moment('2018-12-06').unix() * 1000,\n      最高気温: 13,\n      最低気温: 2\n    }, {\n      date: moment('2018-12-07').unix() * 1000,\n      最高気温: 16,\n      最低気温: 5\n    }];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ResponsiveContainer, {\n      width: \"95%\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(LineChart, {\n      data: this.props.data // 表示するデータ  \n      ,\n      margin: {\n        top: 5,\n        right: 50,\n        left: 50,\n        bottom: 25\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(XAxis // X軸\n    , {\n      dataKey: \"date\" // X軸の基準となるデータ項目名\n      ,\n      tickFormatter: props => moment(props).format('YYYY/MM/DD') // X軸を YYYY/MM/DD 形式で表示します\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(YAxis // Y軸\n    , {\n      domain: ['dataMin', 'dataMax'],\n      ticks: [-10, -5, 0, 5, 10, 15, 20, 25, 30] // Y軸に表示する温度\n      ,\n      unit: \"\\u2103\" // Y軸の単位\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(CartesianGrid // ガイド線の表示\n    , {\n      stroke: \"#ccc\",\n      strokeDasharray: \"3 3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(Tooltip // ツールチップの表示\n    , {\n      labelFormatter: props => moment(props).format('YYYY/MM/DD(ddd)') // ラベルの表示フォーマット（日付）\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(Line // 最高気温のデータを表示\n    , {\n      name: \"\\u6700\\u9AD8\\u6C17\\u6E29\",\n      dataKey: \"\\u6700\\u9AD8\\u6C17\\u6E29\" // this.props.data のキー\n      ,\n      stroke: \"salmon\" // 線の色\n      ,\n      unit: \"\\u2103\" //単位\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(Line // 最低気温のデータを表示\n    , {\n      name: \"\\u6700\\u4F4E\\u6C17\\u6E29\",\n      dataKey: \"\\u6700\\u4F4E\\u6C17\\u6E29\" // this.props.data のキー\n      ,\n      stroke: \"skyblue\" // 線の色\n      ,\n      unit: \"\\u2103\" //単位\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 5\n      }\n    }))));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/front/src/Home/App.jsx"],"names":["React","Component","ResponsiveContainer","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","moment","Home","constructor","props","state","data","lists","componentDidMount","axios","get","then","res","console","log","setState","catch","err","render","date","unix","最高気温","最低気温","top","right","left","bottom","format"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport {\n  ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\n// import axiosbase from 'axios';\nimport moment from 'moment';\n\n// const axios = axiosbase.create({\n//   baseURL: 'http://localhost:3000',\n//   headers: {\n//     'Content-Type': 'application/json',\n//   },\n//   responseType: 'json',\n// })\n\n\nclass Home extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      data: [],\n      // year: [],\n      // month: [],\n      // energy_production: [],\n      lists: [],\n    };\n  }\n  \n  componentDidMount() {\n    axios\n    .get('/')\n    .then((res) => {\n      console.log(res.data);\n      this.setState({ lists: res.data });\n      // console.dir(res.data.data.energy_production[0]);\n    })\n    .catch((err) => {\n      console.log(err) // 失敗\n    });\n  }\n\n  render () {\n    //// - Memo -\n    //// 1. レスポンスは返ってきている\n    //// 2. 一応画面描画もできている\n    //// 3. API設計し直した方が早いかも...\n    //// this.state.dataを取得してエレメント作らないといけない\n    //// 難しいので取得レスポンスの形を考え直した方が早いかも\n    //// res.data.dataでレスポンス内容を取得可能\n    //// - 2020/07/12 -\n\n    // const data = [\n    //   {\n    //     Oxford: this.state.data.data.energy_production\n    //   },\n    //   {\n    //     Oxford: this.state.data.data.energy_production\n    //   },\n    //   {\n    //     Oxford: this.state.data.data.energy_production\n    //   }\n    // ];\n\n    // const data = [\n    //   {\n    //     name: 'Page A', uv: 4000, pv: 2400, amt: 2400,\n    //   },\n    //   {\n    //     name: 'Page B', uv: 3000, pv: 1398, amt: 2210,\n    //   },\n    //   {\n    //     name: 'Page C', uv: 2000, pv: 9800, amt: 2290,\n    //   },\n    //   {\n    //     name: 'Page D', uv: 2780, pv: 3908, amt: 2000,\n    //   },\n    //   {\n    //     name: 'Page E', uv: 1890, pv: 4800, amt: 2181,\n    //   },\n    //   {\n    //     name: 'Page F', uv: 2390, pv: 3800, amt: 2500,\n    //   },\n    //   {\n    //     name: 'Page G', uv: 3490, pv: 4300, amt: 2100,\n    //   },\n    // ];\n\n    // {this.state.res.data.map((data) => {\n    //   data.push({date: moment('2020-07-01').unix() * 1000, Oxford: lists.oxford})\n    // })}\n\n    const data = [\n      { date: moment('2018-12-01').unix() * 1000, 最高気温: 10, 最低気温: 1 },\n      { date: moment('2018-12-02').unix() * 1000, 最高気温: 12, 最低気温: 4 },\n      { date: moment('2018-12-03').unix() * 1000, 最高気温: 18, 最低気温: 8 },\n      { date: moment('2018-12-04').unix() * 1000, 最高気温: 10, 最低気温: 0 },\n      { date: moment('2018-12-05').unix() * 1000, 最高気温: 9, 最低気温: 1 },\n      { date: moment('2018-12-06').unix() * 1000, 最高気温: 13, 最低気温: 2 },\n      { date: moment('2018-12-07').unix() * 1000, 最高気温: 16, 最低気温: 5 },\n    ];\n\n    return (\n      <div>\n        <ResponsiveContainer width=\"95%\">\n  <LineChart\n      data={this.props.data} // 表示するデータ  \n      margin={{top: 5, right: 50, left: 50, bottom: 25}}>\n    <XAxis // X軸\n      dataKey=\"date\" // X軸の基準となるデータ項目名\n      tickFormatter={(props) => moment(props).format('YYYY/MM/DD')} // X軸を YYYY/MM/DD 形式で表示します\n    />\n    <YAxis // Y軸\n      domain={['dataMin', 'dataMax']}\n      ticks={[-10,-5,0,5,10,15,20,25,30]} // Y軸に表示する温度\n      unit=\"℃\" // Y軸の単位\n    />\n    <CartesianGrid // ガイド線の表示\n      stroke=\"#ccc\"\n      strokeDasharray=\"3 3\"\n    />\n    <Tooltip // ツールチップの表示\n      labelFormatter={(props) => moment(props).format('YYYY/MM/DD(ddd)')} // ラベルの表示フォーマット（日付）\n    />\n    <Line // 最高気温のデータを表示\n      name=\"最高気温\"\n      dataKey=\"最高気温\" // this.props.data のキー\n      stroke=\"salmon\" // 線の色\n      unit=\"℃\" //単位\n    />\n    <Line // 最低気温のデータを表示\n      name=\"最低気温\"\n      dataKey=\"最低気温\" // this.props.data のキー\n      stroke=\"skyblue\" // 線の色\n      unit=\"℃\" //単位\n    />\n  </LineChart>\n</ResponsiveContainer>\n      {/* <LineChart\n        width={500}\n        height={300}\n        data={data}\n        margin={{\n          top: 5, right: 30, left: 20, bottom: 5,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n        <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" />\n        <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n        <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#82ca9d\" />\n        <Line type=\"monotone\" dataKey=\"London\" stroke=\"#82ca9d\" />\n      </LineChart> */}\n      </div>\n    );\n  }\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}